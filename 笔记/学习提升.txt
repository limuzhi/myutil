1、https://github.com/the-zion/matrix-core

2、https://github.com/lyouthzzz/ws-gatewa


3、https://github.com/tx7do/kratos-blog


https://blog.csdn.net/freewebsys/article/details/109504012

4、https://pandaychen.github.io/2020/10/10/KRATOS-OPENTRACING-ANALYSIS-1/

5、https://zhuanlan.zhihu.com/p/572148281

物联网
https://developer.aliyun.com/article/1150293

6、https://github.com/go-kratos/examples/tree/main/realtimemap
7、https://github.com/tx7do/kratos-realtimemap?spm=a2c6h.12873639.article-detail.17.1f6b2fcdXiXwLn


提升http 性能
https://zhuanlan.zhihu.com/p/588670733


提升 json 使用
# easyjson
easyjson:
	go get github.com/mailru/easyjson/easyjson
	

# 事务	 Transaction ; 异常处理 Recovery
```
package biz

import (
	"context"
	"github.com/google/wire"
)

var ProviderSet = wire.NewSet(NewUserUseCase, NewCreationUseCase, NewAchievementUseCase, NewCommentUseCase, NewMessageUseCase)

type Jwt interface {
	JwtCheck(token string) (string, error)
}

type Transaction interface {
	ExecTx(context.Context, func(ctx context.Context) error) error
}

type Recovery interface {
	GroupRecover(context.Context, func(ctx context.Context) error) func() error
}

```	

```
type Data struct {
	db             *gorm.DB
	log            *log.Helper
	redisCli       redis.Cmdable
	uc             userv1.UserClient
	cc             creationv1.CreationClient
	commc          commentv1.CommentClient
	ac             achievementv1.AchievementClient
	jwt            Jwt
	cosUserCli     *CosUser
	cosCreationCli *CosCreation
	cosCommentCli  *CosComment
}

type contextTxKey struct{}

func (d *Data) ExecTx(ctx context.Context, fn func(ctx context.Context) error) error {
	return d.db.WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		ctx = context.WithValue(ctx, contextTxKey{}, tx)
		return fn(ctx)
	})
}

func (d *Data) GroupRecover(ctx context.Context, fn func(ctx context.Context) error) func() error {
	return func() error {
		defer func() {
			if rerr := recover(); rerr != nil {
				buf := make([]byte, 64<<10)
				n := runtime.Stack(buf, false)
				buf = buf[:n]
				d.log.Errorf("%v: %s\n", rerr, buf)
			}
		}()
		return fn(ctx)
	}
}


func (d *Data) Recover(ctx context.Context, fn func(ctx context.Context)) func() {
	return func() {
		defer func() {
			if rerr := recover(); rerr != nil {
				buf := make([]byte, 64<<10)
				n := runtime.Stack(buf, false)
				buf = buf[:n]
				d.log.Errorf("%v: %s\n", rerr, buf)
			}
		}()
		fn(ctx)
	}
}

func NewRecovery(d *Data) biz.Recovery {
	return d
}

func NewTransaction(d *Data) biz.Transaction {
	return d
}

```

使用 
```
//异步 异常处理
func (r *AchievementUseCase) AccessUserMedal(ctx context.Context, medal, uuid string) error {
	g, _ := errgroup.WithContext(ctx)
	g.Go(r.re.GroupRecover(ctx, func(ctx context.Context) error {
		err := r.repo.SetUserMedalToCache(ctx, medal, uuid)
		if err != nil {
			return v1.ErrorAccessMedalFailed("access user medal to cache failed: %s", err.Error())
		}
		return nil
	}))
	g.Go(r.re.GroupRecover(ctx, func(ctx context.Context) error {
		err := r.repo.SendMedalToMq(ctx, medal, uuid, "access_user_medal_db_and_cache")
		if err != nil {
			return v1.ErrorAccessMedalFailed("access user medal to mq failed: %s", err.Error())
		}
		return nil
	}))
	return g.Wait()
}

//事务
func (r *AchievementUseCase) AccessUserMedalDbAndCache(ctx context.Context, medal, uuid string) error {
	return r.tm.ExecTx(ctx, func(ctx context.Context) error {
		err := r.repo.SetUserMedal(ctx, medal, uuid)
		if err != nil {
			return v1.ErrorCancelMedalSetFailed("cancel user medal set failed", err.Error())
		}
		err = r.repo.SetUserMedalToCache(ctx, medal, uuid)
		if err != nil {
			return v1.ErrorAccessMedalFailed("access user medal to cache failed: %s", err.Error())
		}
		return nil
	})
}
```

# reids缓存
```
func (r *messageRepo) setMessageSystemNotificationToCache(key string, notification []*biz.SystemNotification) {
	ctx := context.Background()
	_, err := r.data.redisCli.TxPipelined(ctx, func(pipe redis.Pipeliner) error {
		list := make([]interface{}, 0, len(notification))
		for _, item := range notification {
			m, err := item.MarshalJSON()
			if err != nil {
				return errors.Wrapf(err, fmt.Sprintf("fail to marshal avatar review: notification(%v)", item))
			}
			list = append(list, m)
		}
		pipe.RPush(ctx, key, list...)
		pipe.Expire(ctx, key, time.Minute*30)
		return nil
	})
	if err != nil {
		r.log.Errorf("fail to set message system notification to cache: notifications(%v), err(%v)", notification, err)
	}
}
```